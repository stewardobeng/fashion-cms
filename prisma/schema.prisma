generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppSettings {
  id                String   @id @default(cuid())
  businessName      String
  businessStreet    String?
  businessCity      String?
  businessState     String?
  businessZipCode   String?
  businessCountry   String?
  businessPhone     String?
  businessEmail     String?
  businessWebsite   String?
  currency          String   @default("USD")
  timezone          String   @default("UTC")
  taxRate           Float    @default(0)
  invoicePrefix     String   @default("INV")
  invoiceNextNumber Int      @default(1)
  invoiceDueInDays  Int      @default(30)
  fromEmail         String?
  fromName          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  autoBackup        Boolean  @default(false)
  backupFrequency   String   @default("weekly")
  retentionDays     Int      @default(30)

  @@map("app_settings")
}

model Client {
  id                     String          @id @default(cuid())
  firstName              String
  lastName               String
  email                  String          @unique
  phone                  String?
  streetAddress          String?
  city                   String?
  state                  String?
  zipCode                String?
  country                String?
  ageBracket             String?
  dateJoined             DateTime        @default(now())
  skinColor              String?
  ukSize                 String?
  colorShades            String?         @db.LongText
  refashioning           String?         @db.LongText
  embellishments         String?         @db.LongText
  notes                  String?         @db.Text
  preferredContactMethod String?         @default("email")
  status                 String?         @default("active")
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  clientServices         ClientService[]
  invoices               Invoice[]
  payments               Payment[]

  @@map("clients")
}

model Service {
  id             String          @id @default(cuid())
  name           String
  description    String?         @db.Text
  category       String
  basePrice      Float
  duration       Int?
  requirements   String?         @db.LongText
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  clientServices ClientService[]
  invoiceItems   InvoiceItem[]

  @@map("services")
}

model ClientService {
  id             String    @id @default(cuid())
  clientId       String
  serviceId      String
  customPrice    Float?
  notes          String?   @db.Text
  status         String    @default("active")
  startDate      DateTime?
  completionDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  client         Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service        Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([clientId], map: "client_services_clientId_fkey")
  @@index([serviceId], map: "client_services_serviceId_fkey")
  @@map("client_services")
}

model Invoice {
  id               String        @id @default(cuid())
  invoiceNumber    String        @unique
  clientId         String
  issueDate        DateTime      @default(now())
  dueDate          DateTime
  status           String        @default("draft")
  subtotal         Float         @default(0)
  notes            String?       @db.Text
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  clientServiceIds String        @db.LongText
  discount         Float         @default(0)
  paidAmount       Float         @default(0)
  paymentDate      DateTime?
  paymentMethod    String?
  tax              Float         @default(0)
  total            Float         @default(0)
  invoiceItems     InvoiceItem[]
  client           Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  payments         Payment[]

  @@index([clientId], map: "invoices_clientId_fkey")
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  serviceId   String?
  description String
  quantity    Int      @default(1)
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service     Service? @relation(fields: [serviceId], references: [id])

  @@index([invoiceId], map: "invoice_items_invoiceId_fkey")
  @@index([serviceId], map: "invoice_items_serviceId_fkey")
  @@map("invoice_items")
}

model Payment {
  id            String   @id @default(cuid())
  invoiceId     String
  clientId      String
  amount        Float
  paymentMethod String   @default("cash")
  paymentDate   DateTime @default(now())
  reference     String?
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([clientId], map: "payments_clientId_fkey")
  @@index([invoiceId], map: "payments_invoiceId_fkey")
  @@map("payments")
}

model Staff {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("staff")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff")
}
