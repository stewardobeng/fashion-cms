// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AppSettings {
  id                String   @id @default(cuid())
  businessName      String
  businessStreet    String?
  businessCity      String?
  businessState     String?
  businessZipCode   String?
  businessCountry   String?
  businessPhone     String?
  businessEmail     String?
  businessWebsite   String?
  currency          String   @default("USD")
  timezone          String   @default("UTC")
  taxRate           Float    @default(0.0)
  invoicePrefix     String   @default("INV")
  invoiceNextNumber Int      @default(1)
  invoiceDueInDays  Int      @default(30)
  fromEmail         String?
  fromName          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("app_settings")
}

model Client {
  id                     String    @id @default(cuid())
  firstName              String
  lastName               String
  email                  String    @unique
  phone                  String?
  streetAddress          String?
  city                   String?
  state                  String?
  zipCode                String?
  country                String?
  ageBracket             String?
  dateJoined             DateTime  @default(now())
  skinColor              String?
  ukSize                 String?
  colorShades            Json?
  refashioning           Json?
  embellishments         Json?
  notes                  String?   @db.Text
  preferredContactMethod String?   @default("email")
  status                 String?   @default("active")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  // Relations
  clientServices ClientService[]
  invoices       Invoice[]
  payments       Payment[]

  @@map("clients")
}

model Service {
  id           String  @id @default(cuid())
  name         String
  description  String? @db.Text
  category     String
  basePrice    Float
  duration     Int? // in minutes
  requirements Json?
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  clientServices ClientService[]
  invoiceItems   InvoiceItem[]

  @@map("services")
}

model ClientService {
  id              String   @id @default(cuid())
  clientId        String
  serviceId       String
  customPrice     Float?
  notes           String?  @db.Text
  status          String   @default("active") // active, completed, cancelled
  startDate       DateTime?
  completionDate  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("client_services")
}

model Invoice {
  id          String   @id @default(cuid())
  invoiceNumber String @unique
  clientId    String
  issueDate   DateTime @default(now())
  dueDate     DateTime
  status      String   @default("draft") // draft, sent, paid, overdue, cancelled
  subtotal    Float    @default(0)
  taxAmount   Float    @default(0)
  totalAmount Float    @default(0)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  invoiceItems InvoiceItem[]
  payments     Payment[]

  @@map("invoices")
}

model InvoiceItem {
  id          String @id @default(cuid())
  invoiceId   String
  serviceId   String?
  description String
  quantity    Int    @default(1)
  unitPrice   Float
  totalPrice  Float
  createdAt   DateTime @default(now())

  // Relations
  invoice Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull)

  @@map("invoice_items")
}

model Payment {
  id            String   @id @default(cuid())
  invoiceId     String
  clientId      String
  amount        Float
  paymentMethod String   @default("cash") // cash, card, bank_transfer, check
  paymentDate   DateTime @default(now())
  reference     String?
  notes         String?  @db.Text
  createdAt     DateTime @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Staff {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("staff") // admin, staff
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff")
}